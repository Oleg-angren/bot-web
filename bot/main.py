import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from aiohttp import web
import os

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")

# URL
RENDER_EXTERNAL_HOSTNAME = os.getenv("RENDER_EXTERNAL_HOSTNAME")
if RENDER_EXTERNAL_HOSTNAME:
    WEBHOOK_URL = f"https://{RENDER_EXTERNAL_HOSTNAME}.onrender.com"
else:
    WEBHOOK_URL = "http://localhost:8000"

# –ü–æ—Ä—Ç
PORT = int(os.getenv("PORT", 10000))

# –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer("üöÄ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –≤–µ–±-—Ä–µ–∂–∏–º–µ!")

# –≠—Ö–æ
@dp.message()
async def echo(message: Message):
    await message.answer(f"–¢—ã —Å–∫–∞–∑–∞–ª: {message.text}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞
async def handle_webhook(request):
    try:
        update = await request.json()
        await dp.feed_update(update)
        return web.Response(status=200)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        return web.Response(status=500)

# Health check
async def health_check(request):
    return web.Response(text="OK")

# –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = web.Application()
app.router.add_post("/webhook", handle_webhook)
app.router.add_get("/", health_check)

# –ó–∞–ø—É—Å–∫
async def on_startup(app):
    webhook_url = f"{WEBHOOK_URL}/webhook"
    await bot.set_webhook(webhook_url)
    logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")

async def on_shutdown(app):
    await bot.delete_webhook()
    await bot.session.close()

app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    web.run_app(app, host="0.0.0.0", port=PORT)


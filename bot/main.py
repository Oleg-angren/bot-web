import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from aiohttp import web
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –¢–û–ö–ï–ù –ò URL ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")

# –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ö–æ—Å—Ç–∞ –æ—Ç Render
RENDER_EXTERNAL_HOSTNAME = os.getenv("RENDER_EXTERNAL_HOSTNAME")
if RENDER_EXTERNAL_HOSTNAME:
    WEBHOOK_URL = f"https://{RENDER_EXTERNAL_HOSTNAME}"
else:
    WEBHOOK_URL = "http://localhost:8000"

# –ü–æ—Ä—Ç –∏ —Ö–æ—Å—Ç 
APP_HOST = "0.0.0.0"
APP_PORT = int(os.getenv("PORT", 10000))

# === –°–û–ó–î–ê–ù–ò–ï –ë–û–¢–ê –ò –î–ò–°–ü–ï–¢–ß–ï–†–ê ===
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


# –Ø–≤–Ω–æ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –±–æ—Ç–∞ –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É
dp.bot = bot

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer("üöÄ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –Ω–∞ Render.com!")

@dp.message()
async def echo(message: Message):
    await message.answer(f"–í—ã —Å–∫–∞–∑–∞–ª–∏: {message.text}")

# === –í–ï–ë-–°–ï–†–í–ï–† ===
async def on_startup(app):
    webhook_url = f"{WEBHOOK_URL}/webhook"
    try:
        await bot.set_webhook(webhook_url)
        logger.info(f"‚úÖ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")

async def on_shutdown(app):
    try:
        await bot.delete_webhook()
        await bot.session.close()
        logger.info("üí§ –í–µ–±—Ö—É–∫ —É–¥–∞–ª—ë–Ω, —Å–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞
async def handle_webhook(request):
    try:
        update = await request.json()
        # –ü–µ—Ä–µ–¥–∞—ë–º bot –∏ update
        await dp.feed_update(bot, update)
        return web.Response(status=200)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")
        return web.Response(status=500)

# Health check
async def health_check(request):
    return web.Response(text="OK", content_type="text/plain")

# –ó–∞–ø—É—Å–∫
app = web.Application()
app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)
app.router.add_post("/webhook", handle_webhook)
app.router.add_get("/", health_check)

if __name__ == "__main__":
    logger.info(f"üåç –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ http://{APP_HOST}:{APP_PORT}")
    web.run_app(app, host=APP_HOST, port=APP_PORT)
